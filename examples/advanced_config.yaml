# Advanced configuration for Agentic Code Fixer
# This example shows a comprehensive setup with multiple specialized agents

# Repository settings
repository_path: "/path/to/complex/repository"
problem_description: "Fix the race condition in the multi-threaded data processing pipeline that causes data corruption"
target_files:
  - "src/data/processor.py"
  - "src/data/pipeline.py"
  - "src/utils/threading.py"
exclude_patterns:
  - "*.pyc"
  - "__pycache__"
  - ".git"
  - "node_modules"
  - "*.log"
  - "tests/"
  - "docs/"
  - "*.md"

# Generate more candidates for complex problems
num_patch_candidates: 15

# Diverse agent configurations with specialized roles
agents:
  - agent_id: "general_python_expert"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.7
    max_tokens: 3072
    system_prompt: "You are an expert Python developer with deep knowledge of concurrency, threading, and data processing patterns."
    specialized_role: "general"

  - agent_id: "concurrency_specialist"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.6
    max_tokens: 3072
    system_prompt: "You are a concurrency expert specializing in threading, async programming, and race condition fixes in Python."
    specialized_role: "concurrency"

  - agent_id: "security_auditor"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.4
    max_tokens: 2048
    system_prompt: "You are a security expert focused on thread safety, data integrity, and secure concurrent programming practices."
    specialized_role: "security"

  - agent_id: "performance_engineer"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.5
    max_tokens: 2048
    system_prompt: "You are a performance engineer focused on efficient concurrent algorithms and scalable solutions."
    specialized_role: "performance"

  - agent_id: "reliability_engineer"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.3
    max_tokens: 2048
    system_prompt: "You are a reliability engineer focused on fault-tolerant systems, error handling, and robust concurrent code."
    specialized_role: "reliability"

# Enhanced vector database configuration
vectordb:
  provider: "chromadb"
  collection_name: "complex_code_embeddings"
  persist_directory: "./data/vectordb_advanced"
  embedding_model: "sentence-transformers/all-mpnet-base-v2"  # More powerful embedding model
  chunk_size: 800
  chunk_overlap: 100

# OpenCode configuration for parallel processing
opencode:
  enabled: true
  max_parallel_agents: 5
  timeout_seconds: 600  # Longer timeout for complex problems

# ELO tournament evaluation for better patch ranking
evaluation:
  method: "elo_tournament"
  model_name: "claude-sonnet-4-5-20250929"
  temperature: 0.05  # Very low temperature for consistent evaluation
  max_tokens: 4096
  elo_k_factor: 24
  min_comparisons_per_patch: 5
  confidence_threshold: 0.8

# Comprehensive testing configuration
testing:
  test_command: "python -m pytest tests/ -v --tb=short"
  test_timeout_seconds: 600
  pre_test_commands:
    - "pip install -r requirements.txt"
    - "python setup.py develop"
  post_test_commands:
    - "python -m pytest tests/integration/ -v"
  fail_on_regression: true

# Detailed logging configuration
logging:
  level: "DEBUG"
  output_dir: "./experiments/advanced"
  log_file: "detailed_experiment.log"
  save_patches: true
  save_evaluations: true
  save_test_results: true
  console_output: true

# Environment-based API key configuration
# Set ANTHROPIC_API_KEY environment variable
# claude_api_key: "${ANTHROPIC_API_KEY}"