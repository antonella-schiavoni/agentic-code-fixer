# Basic configuration for Agentic Code Fixer
# This example shows a minimal setup for fixing Python code

# Repository settings
repository_path: "/Users/antonellaschiavoni/antonella-projects/math-operations-repo"
problem_description: ""
exclude_patterns: #TODO: Does it make sense to include exclude_patterns here?
  - "*.pyc"
  - "__pycache__"
  - ".git"
  - "node_modules"
  - "*.log"
apply_patch_to_repository: true  # Set to false to only test patches without applying them to the original repository

# Reduced number of candidate solutions for faster evaluation
num_candidate_solutions: 6

# Multiple agents for diverse patch generation
# TODO: Improve patch diversity by having each agent generate multiple alternative
# patches per solution, or use the generate_diverse_patches() method to create
# parameter variations, rather than requiring one agent per patch
agents:
  - agent_id: "general_fixer"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.7
    max_tokens: 2048
    system_prompt: "You are a skilled Python developer focused on fixing bugs while maintaining code quality."
    specialized_role: "general"
  
  - agent_id: "conservative_fixer"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.3
    max_tokens: 2048
    system_prompt: "You are a conservative Python developer focused on minimal, safe changes that preserve existing functionality."
    specialized_role: "general"
    
  - agent_id: "creative_fixer"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.9
    max_tokens: 2048
    system_prompt: "You are a creative Python developer who explores innovative solutions while maintaining code correctness."
    specialized_role: "general"
    
  - agent_id: "analytical_fixer"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.1
    max_tokens: 2048
    system_prompt: "You are an analytical Python developer who focuses on precise, methodical solutions with detailed reasoning."
    specialized_role: "general"
    
  - agent_id: "pragmatic_fixer"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.5
    max_tokens: 2048
    system_prompt: "You are a pragmatic Python developer focused on practical, efficient solutions that get the job done."
    specialized_role: "general"
    
  - agent_id: "defensive_fixer"
    model_name: "claude-sonnet-4-5-20250929"
    temperature: 0.2
    max_tokens: 2048
    system_prompt: "You are a defensive Python developer who prioritizes robustness, error handling, and edge case consideration."
    specialized_role: "general"

# Vector database configuration
vectordb:
  provider: "chromadb"
  collection_name: "code_embeddings"
  persist_directory: "./data/vectordb"
  embedding_model: "sentence-transformers/all-MiniLM-L6-v2"
  chunk_size: 500
  chunk_overlap: 50

# OpenCode/Claude configuration with direct file operations
opencode:
  enabled: true
  use_sessions: true
  max_parallel_sessions: 2
  session_timeout_seconds: 300
  server_host: "127.0.0.1"
  server_port: 60181
  enable_shell_execution: false
  enable_code_analysis: true
  enable_direct_file_ops: true  # Enable direct file operations for faster execution

# Evaluation configuration (optimized for speed)
evaluation:
  method: "elo_tournament"
  model_name: "claude-sonnet-4-5-20250929"
  temperature: 0.1
  max_tokens: 1024  # Reduced for faster evaluation
  elo_k_factor: 32
  min_comparisons_per_patch: 1  # Reduced from 3 to 1 for speed
  confidence_threshold: 0.6  # Slightly lower threshold

# Testing configuration
testing:
  test_command: "pytest"
  test_timeout_seconds: 180  # Reduced timeout
  pre_test_commands: []
  post_test_commands: []
  fail_on_regression: true

# Logging configuration
logging:
  level: "DEBUG"  # Reduced from DEBUG for less verbose output
  output_dir: "./experiments"
  log_file: "agentic_code_fixer.log"
  save_patches: true
  save_evaluations: true
  save_test_results: true
  console_output: true

# Claude API key (set via environment variable ANTHROPIC_API_KEY)
# claude_api_key: "your-claude-api-key-here"