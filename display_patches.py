#!/usr/bin/env python3
"""Display patch contents from agentic code fixer experiments.

This script reads saved experiment data and displays the actual patch content
for each solution generated by the AI agents.
"""

import json
import sys
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.syntax import Syntax

def display_patches(experiment_dir: str):
    """Display all patches from an experiment directory."""
    console = Console()
    
    experiment_path = Path(experiment_dir)
    if not experiment_path.exists():
        console.print(f"[red]Error: Experiment directory not found: {experiment_dir}[/red]")
        return
    
    patches_file = experiment_path / "patches" / "patches.json"
    if not patches_file.exists():
        console.print(f"[red]Error: Patches file not found: {patches_file}[/red]")
        return
    
    # Load patches
    with open(patches_file, 'r') as f:
        patches = json.load(f)
    
    console.print(f"[bold green]Found {len(patches)} patches in experiment[/bold green]\n")
    
    for i, patch in enumerate(patches, 1):
        agent_id = patch.get("agent_id", "unknown")
        confidence = patch.get("confidence_score", 0.0)
        description = patch.get("description", "No description")
        content = patch.get("content", "No content")
        file_path = patch.get("file_path", "unknown")
        status = patch.get("status", "unknown")
        
        # Color code by status
        if status == "applied":
            border_style = "green"
            status_text = "[bold green]✓ APPLIED[/bold green]"
        elif status == "generated":
            border_style = "blue"
            status_text = "[bold blue]○ GENERATED[/bold blue]"
        else:
            border_style = "yellow"
            status_text = f"[bold yellow]? {status.upper()}[/bold yellow]"
        
        # Create header
        header = (
            f"{status_text} [bold cyan]Patch {i}/{len(patches)}[/bold cyan] - "
            f"[bold yellow]{agent_id}[/bold yellow] "
            f"(confidence: {confidence:.2f})\n"
            f"[dim]File: {file_path}[/dim]\n"
            f"[dim]Description: {description[:100]}{'...' if len(description) > 100 else ''}[/dim]"
        )
        
        # Create and display the panel header
        header_panel = Panel(
            header,
            title=f"Agent: {agent_id}",
            border_style=border_style,
            expand=False
        )
        console.print(header_panel)
        
        # Display patch content with syntax highlighting
        console.print("[dim]Code:[/dim]")
        try:
            syntax = Syntax(content, "python", theme="monokai", line_numbers=True)
            console.print(syntax)
        except Exception:
            # Fallback to plain text if syntax highlighting fails
            console.print(content)
        
        console.print()  # Add spacing between patches

def main():
    """Main entry point."""
    if len(sys.argv) != 2:
        console = Console()
        console.print("[red]Usage: python display_patches.py <experiment_directory>[/red]")
        console.print("\nExample:")
        console.print("  python display_patches.py experiments/cd58ea4b-6332-4403-8396-f4f6e44d7135")
        
        # Show available experiments
        experiments_dir = Path("experiments")
        if experiments_dir.exists():
            console.print("\n[dim]Available experiments:[/dim]")
            for exp_dir in sorted(experiments_dir.iterdir()):
                if exp_dir.is_dir():
                    console.print(f"  {exp_dir.name}")
        return 1
    
    experiment_dir = sys.argv[1]
    display_patches(experiment_dir)
    return 0

if __name__ == "__main__":
    sys.exit(main())